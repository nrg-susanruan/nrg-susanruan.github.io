{"version":3,"file":"demos/forms/index.html.js","mappings":"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","sources":["webpack://de-migration/./node_modules/html5-form-validation-js/html5-form-validation.js","webpack://de-migration/./src/assets/demo-scripts/backgroundToggle.js","webpack://de-migration/./src/pages/demos/forms/index.js"],"sourcesContent":["export let FormValidation = ( function( window, document ) {\n\n    let callbacks = [];\n    let validationMsgClass = 'validation-message';\n    let inputErrorClass = 'input-error';\n\n    function init( formElement ) {\n\n        let formId = formElement.id;\n        let validFormCallback = formElement.getAttribute( 'data-form-callback' );\n\n        if( formId === undefined ) {\n            console.warn( 'HTML5 Validation Plugin, Form ID missing.' );\n            return; // exit plugin\n        }\n\n        formElement.noValidate = true; \n        formElement.addEventListener( 'submit', function( submitEvent ) {\n            submitEvent.preventDefault();\n            submitEvent.stopImmediatePropagation();\n            submitEvent.stopPropagation();\n            validateForm( submitEvent, validFormCallback );\n        });\n\n    }\n\n    /**\n     * Check for form submissions by bots\n     * @param {Node} honeypot The function to call after form is validated \n     */\n\n    let checkHoneypot = function( form ) {\n        \n        var honeypot = form.querySelector( '.jar input[type=\"text\"]' );\n        if( honeypot === null ) {\n            return; // Skip this\n        } else {\n            return ( honeypot.value !== '' ) ? true : false;\n        }\n\n    } \n\n    /** \n     * Validate form \n     * \n     * @param {Object} submitEvent  Event listener triggered on click of submit button\n     * @param {String} callbackName Name of index where callback function was stored within this.forms\n     */\n\n    function validateForm( submitEvent, callbackName ) {\n\n        // Prevent form submissions by bots \n        if ( checkHoneypot( submitEvent.target ) ) { return false };\n\n        if( callbackName === null ) {\n            console.warn( 'HTML5 Form Validation, name of callback not supplied.' );\n            return; // exit plugin\n        }\n\n        // Check field validity\n        if ( !submitEvent.target.checkValidity() ) {\n\n            removeMessage( submitEvent.target );\n            postMessage( submitEvent.target );\n\n        } else {\n            \n            removeMessage( submitEvent.target );\n            callbacks[ callbackName ]( submitEvent );\n            return true; /* everything's cool, the form is valid! */\n\n        }\n\n    }\n\n    /**\n     * Add validation messages to form inputs \n     * \n     * @param {HTMLelement} form \n     */\n\n    function postMessage( form ) {\n\n        let elements = form.elements;\n        let errorOutputId = form.getAttribute( 'data-error-output-id' ); \n        let aroundInput = form.getAttribute( 'data-near-input' );\n        let errorMsgContainer = document.getElementById( errorOutputId );\n\n        /* Loop through the elements, looking for an invalid one. */\n        for ( let index = 0, len = elements.length; index < len; index++ ) {\n\n            let element = elements[ index ];\n            let message = element.validationMessage;\n            let parent  = element.parentNode; \n\n            if( element.dataset.errorMessage !== undefined ) { \n                message = element.dataset.errorMessage; \n            } \n\n            if( errorOutputId !== null ) {\n                message = formatElementName( element.name ) + \" - \" + message;\n            }\n               \n            if ( element.willValidate === true && element.validity.valid !== true ) {\n                \n                let messageDiv = document.createElement( 'div' );\n                messageDiv.classList.add( validationMsgClass );\n                messageDiv.appendChild( document.createTextNode( message ) );\n\n                element.classList.add( inputErrorClass );\n                if( errorOutputId === null ) {\n                    \n                    if( aroundInput === 'before' ) { \n                        parent.insertBefore( messageDiv, element.previousSibling );\n                    } else { \n                        parent.insertBefore( messageDiv, element.nextSibling );\n                    }\n                                        \n                } else {\n                    errorMsgContainer.appendChild( messageDiv );\n                }\n\n            }\n\n        }\n\n        function formatElementName( name ) { \n            let newName = name.replace( '-', ' ' ).replace( '_', ' ' );\n            return newName.replace(/(^\\w{1})|(\\s+\\w{1})/g, letter => letter.toUpperCase());\n        }\n\n    }\n\n    /**\n     * Remove validation messages from form \n     * \n     * @param {HTMLelement} form \n     */\n\n    function removeMessage( form ) {\n\n        let validationMessages = document.querySelectorAll( '.' + validationMsgClass );\n        for( let i = 0; i < validationMessages.length; i++ ) {\n            validationMessages[ i ].remove();\n        }\n\n        let inputErrors = form.querySelectorAll( '.' + inputErrorClass );\n        for( let i = 0; i < inputErrors.length; i++ ) {\n            inputErrors[ i ].classList.remove( inputErrorClass );\n        }\n\n    }\n\n    function registerCallback( callbackName, func  ) {\n\n        callbacks[ callbackName ] = func;\n\n    }\n\n    return {\n        registerForm : init, \n        removeMessage : removeMessage, \n        postMessage : postMessage, \n        registerCallback: registerCallback\n    }\n\n})( window, document );\n\nexport const initFormValidation = function() {\n\n    let formsOnPage = document.querySelectorAll( 'form' );\n\n    for( let i = 0; i < formsOnPage.length; i++  ) {\n        if( formsOnPage[ i ].hasAttribute( 'novalidate' ) ) { continue; }\n        FormValidation.registerForm( formsOnPage[ i ] );\n    }\n\n}","export function initBackgroundToggle() {\n    const contrastButton = document.getElementById('contrast');\n    const sectionElements = document.querySelectorAll('section');\n\n    let state = {\n        active: 0,\n    };\n\n    let bgProps = [\n        'none',\n        'bg--primary-base',\n        'bg--primary-light-1',\n        'bg--primary-light-2',\n        'bg--primary-light-3',\n        'bg--primary-dark-1',\n        'bg--primary-dark-2',\n        'bg--secondary-base',\n        'bg--secondary-light-1',\n        'bg--secondary-light-2',\n        'bg--secondary-light-3',\n        'bg--secondary-dark-1',\n        'bg--secondary-dark-2',\n        'bg--tertiary-base',\n        'bg--tertiary-light-1',\n        'bg--tertiary-light-2',\n        'bg--tertiary-dark-1',\n        'bg--tertiary-dark-2',\n        'bg--error-background',\n        'bg--success-background',\n        'bg--warning-background',\n        'bg--info-background',\n    ];\n\n    for (let i = 0; i < sectionElements.length; i++) {\n        sectionElements[i].classList.add(bgProps[state.active]);\n    }\n\n    contrastButton.addEventListener('click', (e) => {\n        let prevActive = state.active;\n        state.active = state.active < bgProps.length - 1 ? state.active + 1 : 0;\n\n        for (let i = 0; i < sectionElements.length; i++) {\n            if (sectionElements[i].classList.length !== 0) {\n                sectionElements[i].classList.replace(bgProps[prevActive], bgProps[state.active]);\n            } else {\n                sectionElements[i].classList.add(bgProps[state.active]);\n            }\n        }\n    });\n}\n","import { initBackgroundToggle } from '../../../assets/demo-scripts/backgroundToggle';\nimport { FormValidation, initFormValidation } from 'html5-form-validation-js/html5-form-validation.js';\n\ninitBackgroundToggle();\n\n// Initialize Plugin\ninitFormValidation();\n\n// Form Submission Handler\nFormValidation.registerCallback('handleFormValidation', (formSubmitEvent) =>\n    alert('Form ID - ' + formSubmitEvent.target.id + ' is valid!')\n);\n\n//  Form Reset Button\nconst formResetButton = document.querySelector('#demo-form [type=reset]');\n\nformResetButton.addEventListener('click', function (e) {\n    const form = e.target.form;\n\n    const inputErrors = form.querySelectorAll('.input-error');\n    const validationMessages = form.querySelectorAll('.validation-message');\n\n    inputErrors.forEach((formInput) => {\n        formInput.classList.remove('input-error');\n    });\n\n    validationMessages.forEach((messageNode) => {\n        messageNode.parentElement.removeChild(messageNode);\n    });\n});\n\n// Input Reset Button\nconst inputResetButtons = document.querySelectorAll('#demo-form .has-reset-button > button');\n\ninputResetButtons.forEach((button) => {\n    button.addEventListener('click', (e) => {\n        e.preventDefault();\n\n        const inputWrapper = e.target.parentElement.parentElement; // Icon ends up being the target\n        const input = inputWrapper.querySelector('input');\n\n        input.classList.remove('input-error');\n        input.value = '';\n\n        if (inputWrapper.querySelector('.validation-message') !== null) {\n            inputWrapper.removeChild(inputWrapper.querySelector('.validation-message'));\n        }\n    });\n});\n\n// Nested Checklist\nconst checklistLabel = document.querySelectorAll('.nested-checklist');\n\nchecklistLabel.forEach((checklist) => {\n    const id = checklist.getAttribute('for');\n    const subOptions = document.querySelectorAll(`[for=${id}] + ul > li input`);\n    const parentOptionInput = document.querySelector(`[for=${id}] input`);\n\n    checklist.addEventListener('click', (e) => {\n        if (e.target.checked) {\n            subOptions.forEach((option) => {\n                option.checked = true;\n            });\n        } else {\n            subOptions.forEach((option) => {\n                option.checked = false;\n            });\n        }\n    });\n\n    subOptions.forEach((option) => {\n        option.addEventListener('click', (e) => {\n            const subOptionsCount = subOptions.length;\n            let checkedOptionsCount = checkAllOptions(subOptions);\n\n            switch (true) {\n                case checkedOptionsCount === 0:\n                    checklist.classList.remove('partial');\n                    parentOptionInput.checked = false;\n                    break;\n\n                case checkedOptionsCount === subOptionsCount:\n                    checklist.classList.remove('partial');\n                    parentOptionInput.checked = true;\n                    break;\n                default:\n                    checklist.classList.add('partial');\n                    parentOptionInput.checked = true;\n                    break;\n            }\n        });\n    });\n\n    function checkAllOptions(subOptions) {\n        let count = 0;\n\n        for (let i = 0; i < subOptions.length; i++) {\n            if (subOptions[i].checked) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n});\n\n// Form Check Validity\n\nconst form = document.querySelector('#demo-form');\n\nform.addEventListener('change', (e) => {\n    const input = e.target;\n    const validationMsgClass = 'validation-message';\n    const inputErrorClass = 'input-error';\n    const errorOutputId = form.getAttribute('data-error-output-id');\n    const aroundInput = form.getAttribute('data-near-input');\n    const errorMsgContainer = document.getElementById(errorOutputId);\n\n    if (!form.checkValidity() && input.willValidate === true && input.validity.valid !== true) {\n        let message = input.validationMessage;\n        let parent = input.parentNode;\n\n        if (input.dataset.errorMessage !== undefined) {\n            message = input.dataset.errorMessage;\n        }\n\n        if (errorOutputId !== null) {\n            message = formatElementName(input.name) + ' - ' + message;\n        }\n\n        if (input.willValidate === true && input.validity.valid !== true) {\n            let messageDiv = document.createElement('div');\n            messageDiv.classList.add(validationMsgClass);\n            messageDiv.appendChild(document.createTextNode(message));\n\n            input.classList.add(inputErrorClass);\n            if (errorOutputId === null) {\n                if (aroundInput === 'before') {\n                    parent.insertBefore(messageDiv, input.previousSibling);\n                } else {\n                    parent.insertBefore(messageDiv, input.nextSibling);\n                }\n            } else {\n                errorMsgContainer.appendChild(messageDiv);\n            }\n        }\n    } else {\n        input.classList.remove('input-error');\n\n        if (input.parentElement.querySelector('.validation-message') !== null) {\n            input.parentElement.removeChild(input.parentElement.querySelector('.validation-message'));\n        }\n    }\n});\n"],"names":["FormValidation","window","document","callbacks","validationMsgClass","inputErrorClass","postMessage","form","elements","errorOutputId","getAttribute","aroundInput","errorMsgContainer","getElementById","index","len","length","element","message","validationMessage","parent","parentNode","undefined","dataset","errorMessage","name","replace","letter","toUpperCase","willValidate","validity","valid","messageDiv","createElement","classList","add","appendChild","createTextNode","insertBefore","previousSibling","nextSibling","removeMessage","validationMessages","querySelectorAll","i","remove","inputErrors","registerForm","formElement","formId","id","validFormCallback","noValidate","addEventListener","submitEvent","preventDefault","stopImmediatePropagation","stopPropagation","callbackName","target","honeypot","querySelector","value","checkValidity","console","warn","validateForm","registerCallback","func","contrastButton","sectionElements","state","active","bgProps","e","prevActive","initBackgroundToggle","formsOnPage","hasAttribute","initFormValidation","formSubmitEvent","alert","forEach","formInput","messageNode","parentElement","removeChild","button","inputWrapper","input","checklist","subOptions","parentOptionInput","checked","option","subOptionsCount","checkedOptionsCount","count","checkAllOptions","formatElementName"],"sourceRoot":""}