{"version":3,"file":"demos/modals/index.html.js","mappings":"MAEA,MAWMA,EAAWC,SAASC,eAAe,oBAEzC,SAASC,EAAeC,EAASC,GAC7B,MAAMC,EAAQL,SAASC,eAAeE,GACtCJ,EAASO,MAAMC,QAAUH,EACzBC,EAAMC,MAAMC,QAAUH,CAC1B,CAEA,SAASI,EAAUL,GACfD,EAAeC,EAAS,QAC5B,CAEA,SAASM,EAAWN,GAChBD,EAAeC,EAAS,OAC5B,CAEA,SAASO,EAAeC,GACpBX,SAASY,iBAAiB,gBAAgBC,SAASC,IAC/CA,EAAOC,iBAAiB,SAAS,WAC7B,MAAMZ,EAAUa,KAAKC,aAAa,cAClCN,EAAOR,EACX,GAAE,GAEV,CAuBA,SAASe,EAAYC,EAAKR,EAAQS,GAC9BD,EAAIN,SAASQ,IACT,MAAMP,EAASd,SAASsB,cAAe,IAAGF,MAAcC,OACpDP,GACAA,EAAOC,iBAAiB,SAAS,IAAMJ,EAAOU,IAClD,GAER,CA2BA,SAASE,EAAoBC,EAAOC,GAChCC,EAAwBF,GAExB,MAAMG,EAAe3B,SAAS4B,cAAc,OAC5CD,EAAaE,UAAY,qBACzBF,EAAaG,YAAcL,EAC3BD,EAAMO,WAAWC,aAAaL,EAAcH,EAAMS,YACtD,CAEA,SAASP,EAAwBF,GAC7B,MAAMS,EAAcT,EAAMS,YACtBA,GAAyC,uBAA1BA,EAAYJ,WAC3BL,EAAMO,WAAWG,YAAYD,EAErC,CArEAvB,EAAeF,GACfE,EAAeD,GAEfT,SAASe,iBAAiB,SAAS,SAAUoB,GACzC,MAAMC,EAAcC,MAAMC,KAAKtC,SAASY,iBAAiB,iBACnD2B,EAAgBH,EAAYI,KAAK1B,GAAWA,EAAOO,KAEzDe,EAAYvB,SAASC,IACjB,MAAMX,EAAUW,EAAOG,aAAa,cAC9BZ,EAAQL,SAASC,eAAeE,GAGjCE,EAAMoC,SAASN,EAAMO,SACrBH,EAAcI,SAASR,EAAMO,OAAOrB,KACb,SAAxBhB,EAAMC,MAAMC,SAEZL,EAAeC,EAAS,OAC5B,GAER,IAWAe,EAlEqB,CACjB,cACA,gBACA,aACA,iBACA,mBACA,iBA4DsBV,EAAW,cACrCU,EA1DsB,CAAC,cAAe,iBAAkB,iBA0D7BT,EAAY,oBAwCvCT,SAASC,eAAe,wBAAwBc,iBAAiB,SApCjE,WACI,MACM6B,EADO5C,SAASC,eAAe,UACjB4C,qBAAqB,SACzC,IAAIC,GAAU,EAEd,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAOI,OAAQD,IAAK,CACpC,MAAMvB,EAAQoB,EAAOG,GACjBvB,EAAMyB,aAAa,aAA+B,KAAhBzB,EAAM0B,OACxCJ,GAAU,EACVvB,EAAoBC,EAAO,mBACpBA,EAAMyB,aAAa,aAAezB,EAAM2B,iBAC/CL,GAAU,EACVvB,EAAoBC,EAAO,kBAE3BE,EAAwBF,EAEhC,CACA,OAAOsB,CACX,G","sources":["webpack://de-migration/./src/pages/demos/modals/index.js"],"sourcesContent":["// Modal open & close functions\n\nconst openModalIds = [\n    'basic-modal',\n    'confirm-modal',\n    'form-modal',\n    'location-modal',\n    'no-service-modal',\n    'autopay-modal',\n];\n\nconst closeModalIds = ['basic-modal', 'location-modal', 'autopay-modal'];\n\nconst modalDiv = document.getElementById('modal-containers');\n\nfunction setModalValues(modalId, modalValue) {\n    const modal = document.getElementById(modalId);\n    modalDiv.style.display = modalValue;\n    modal.style.display = modalValue;\n}\n\nfunction openModal(modalId) {\n    setModalValues(modalId, 'block');\n}\n\nfunction closeModal(modalId) {\n    setModalValues(modalId, 'none');\n}\n\nfunction setModalAction(action) {\n    document.querySelectorAll('[data-modal]').forEach((button) => {\n        button.addEventListener('click', function () {\n            const modalId = this.getAttribute('data-modal');\n            action(modalId);\n        });\n    });\n}\n\nsetModalAction(openModal);\nsetModalAction(closeModal);\n\ndocument.addEventListener('click', function (event) {\n    const openButtons = Array.from(document.querySelectorAll('[data-modal]'));\n    const openButtonIds = openButtons.map((button) => button.id);\n\n    openButtons.forEach((button) => {\n        const modalId = button.getAttribute('data-modal');\n        const modal = document.getElementById(modalId);\n\n        if (\n            !modal.contains(event.target) &&\n            !openButtonIds.includes(event.target.id) &&\n            modal.style.display !== 'none'\n        ) {\n            setModalValues(modalId, 'none');\n        }\n    });\n});\n\nfunction toggleModal(ids, action, attribute) {\n    ids.forEach((id) => {\n        const button = document.querySelector(`[${attribute}=\"${id}\"]`);\n        if (button) {\n            button.addEventListener('click', () => action(id));\n        }\n    });\n}\n\ntoggleModal(openModalIds, openModal, 'data-modal');\ntoggleModal(closeModalIds, closeModal, 'data-modal-close');\n\n// Form Validation\n\nfunction validateForm() {\n    const form = document.getElementById('myForm');\n    const inputs = form.getElementsByTagName('input');\n    let isValid = true;\n\n    for (let i = 0; i < inputs.length; i++) {\n        const input = inputs[i];\n        if (input.hasAttribute('required') && input.value === '') {\n            isValid = false;\n            displayErrorMessage(input, 'Field required');\n        } else if (input.hasAttribute('pattern') && !input.checkValidity()) {\n            isValid = false;\n            displayErrorMessage(input, 'Invalid input');\n        } else {\n            removeValidationMessage(input);\n        }\n    }\n    return isValid;\n}\n\nfunction displayErrorMessage(input, message) {\n    removeValidationMessage(input);\n\n    const errorMessage = document.createElement('div');\n    errorMessage.className = 'validation-message';\n    errorMessage.textContent = message;\n    input.parentNode.insertBefore(errorMessage, input.nextSibling);\n}\n\nfunction removeValidationMessage(input) {\n    const nextSibling = input.nextSibling;\n    if (nextSibling && nextSibling.className === 'validation-message') {\n        input.parentNode.removeChild(nextSibling);\n    }\n}\n\ndocument.getElementById('formValidationButton').addEventListener('click', validateForm);\n"],"names":["modalDiv","document","getElementById","setModalValues","modalId","modalValue","modal","style","display","openModal","closeModal","setModalAction","action","querySelectorAll","forEach","button","addEventListener","this","getAttribute","toggleModal","ids","attribute","id","querySelector","displayErrorMessage","input","message","removeValidationMessage","errorMessage","createElement","className","textContent","parentNode","insertBefore","nextSibling","removeChild","event","openButtons","Array","from","openButtonIds","map","contains","target","includes","inputs","getElementsByTagName","isValid","i","length","hasAttribute","value","checkValidity"],"sourceRoot":""}